{"version":3,"sources":["component/Menu.js","component/Delete.js","component/Setdate.js","component/Home.js","App.js","serviceWorker.js","index.js"],"names":["Menu","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","Component","Delete","props","state","status","message","handleClick","bind","this","setState","axios","post","then","res","console","log","catch","error","role","onClick","Setdate","date","handleChange","e","target","value","parameter","data","onChange","Home","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06947eef.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nexport default class Menu extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div className=\"container\">\n          <a className=\"navbar-brand\" href=\"#\">\n            Fsoftpro\n          </a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\" />\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item active\">\n                <Link to=\"/\" className=\"nav-link\">\n                  Home\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nexport default class Delete extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { status: null, message: \"\" };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({ status: null, message: \"\" });\n  }\n\n  handleClick() {\n    this.setState({ status: null, message: \"\" });\n    let url = \"http://localhost:5000/truncate\";\n    axios\n      .post(url)\n      .then((res) => {\n        console.log(res);\n        this.setState({ status: \"success\", message: \"TRUNCATE all success\" });\n      })\n      .catch((error) => {\n        this.setState({ status: \"error\", message: \"Fail truncate.\" });\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.status == \"success\" ? (\n          <div className=\"alert alert-success\" role=\"alert\">\n            {this.state.message}\n          </div>\n        ) : (\n          \"\"\n        )}\n        {this.state.status == \"error\" ? (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            {this.state.message}\n          </div>\n        ) : (\n          \"\"\n        )}\n\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-primary\"\n          onClick={this.handleClick}\n        >\n          Reset (TRUNCATE)\n        </button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nexport default class Setdate extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { status: null, message: \"\", date: '' };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({ status: null, message: \"\", date: '' });\n  }\n\n  handleChange(e) {\n      this.setState({date: e.target.value});\n  }\n\n  handleClick() {\n    this.setState({ status: null, message: \"\" });\n    let url = \"http://localhost:5000/setdate\";\n    let parameter = {date: this.state.date}\n    axios\n      .post(url, parameter)\n      .then((res) => {\n        console.log(res);\n        this.setState({ status: \"success\", message: res.data });\n      })\n      .catch((error) => {\n        this.setState({ status: \"error\", message: error.data });\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.status == \"success\" ? (\n          <div className=\"alert alert-success\" role=\"alert\">\n            {this.state.message}\n          </div>\n        ) : (\n          \"\"\n        )}\n        {this.state.status == \"error\" ? (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            {this.state.message}\n          </div>\n        ) : (\n          \"\"\n        )}\n        <div className=\"input-group mb-3\">\n          <input type=\"date\" className=\"form-control\" onChange={this.handleChange} />\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-outline-primary\" type=\"button\" onClick={this.handleClick}>\n              Update\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Delete from \"./Delete\";\nimport Setdate from \"./Setdate\";\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row py-3\">\n                    <div className=\"col-12\">\n                        <table className=\"table table-bordered\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>Turncate all for reset new import data</td>\n                                    <td>\n                                        <Delete />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>Set date</td>\n                                    <td><Setdate /></td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport Menu from './component/Menu';\nimport Home from './component/Home';\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <div>\n          <Menu />\n\n          <Switch>\n            <Route path=\"/home\">\n              <Home />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}